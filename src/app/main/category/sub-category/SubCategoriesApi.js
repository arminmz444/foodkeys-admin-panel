import { apiService as api } from 'app/store/apiService';

/**
 * We'll define endpoints for SubCategory entity, matching your standard:
 * - GET    /subcategory
 * - GET    /subcategory/{id}
 * - POST   /subcategory
 * - PUT    /subcategory/{id}
 * - DELETE /subcategory/{id}
 *
 * We assume the response has the structure:
 * {
 *   "status": "SUCCESS",
 *   "statusCode": 200,
 *   "message": "...",
 *   "data": {...}, // SubCategory data
 *   "error": null,
 *   "pagination": {...}
 * }
 */

// Tag types for subCategories
const addTagTypes = [
	'subCategoryList',
	'eCommerce_products',
	'eCommerce_product',
	'eCommerce_orders',
	'eCommerce_order',
	'subCategory'
];

const SubCategoryApi = api
	.enhanceEndpoints({
		addTagTypes
	})
	.injectEndpoints({
		endpoints: (builder) => ({
			// 1) GET subCategories (list)
			getSubCategories: builder.query({
				query: ({ pageNumber, pageSize, search, sort, filter }) => ({
					url: `/subcategory?pageNumber=${pageNumber}&pageSize=${pageSize}&search=${search}&sort=${(sort && Object.entries(sort)?.length && JSON.stringify(sort)) || ''}&filter=${(filter && Object.entries(filter)?.length && JSON.stringify(filter)) || ''}`,
					method: 'GET'
				}),
				transformResponse: (response) => {
					const data = { data: response?.data };

					if (response && response.pagination) {
						data.totalPages = response.pagination.totalPages;
						data.totalElements = response.pagination.totalElements;
						data.pageSize = response.pagination.pageSize;
						data.pageIndex = response.pagination.pageIndex;
					}

					// console.log(`response: ${JSON.stringify(response)}`);
					// console.log(`Data: ${JSON.stringify(data)}`);
					return data;
				},
				providesTags: ['subCategoryList']
			}),

			// 2) GET single subCategory by ID
			getSubCategory: builder.query({
				query: (id) => ({
					url: `/subcategory/${id}`,
					method: 'GET'
				}),
				transformResponse: (response) => response?.data,
				providesTags: (result, error, id) => [{ type: 'subCategory', id }]
			}),

			// 3) CREATE subCategory
			createSubCategory: builder.mutation({
				query: (newSubCategory) => ({
					url: '/subcategory',
					method: 'POST',
					data: newSubCategory
				}),
				transformResponse: (response) => response,
				invalidatesTags: ['subCategoryList']
			}),

			// 4) UPDATE subCategory
			updateSubCategory: builder.mutation({
				query: ({ id, ...updatedFields }) => ({
					url: `/subcategory/${id}`,
					method: 'PUT',
					data: updatedFields
				}),
				transformResponse: (response) => response?.data,
				invalidatesTags: (result, error, { id }) => [{ type: 'subCategory', id }, 'subCategoryList']
			}),

			// 5) DELETE subCategory
			deleteSubCategory: builder.mutation({
				query: (id) => ({
					url: `/subcategory/${id}`,
					method: 'DELETE'
				}),
				transformResponse: (response) => response?.data,
				invalidatesTags: ['subCategoryList']
			})
		}),
		overrideExisting: false
	});

export default SubCategoryApi;

/**
 * Hooks auto-generated by RTK Query for each endpoint.
 * Usage:
 * const { data, isLoading, error } = useGetSubCategoriesQuery();
 * const [createSubCategory, createStatus] = useCreateSubCategoryMutation();
 * ...
 */
export const {
	useGetSubCategoriesQuery,
	useGetSubCategoryQuery,
	useCreateSubCategoryMutation,
	useUpdateSubCategoryMutation,
	useDeleteSubCategoryMutation
} = SubCategoryApi;
